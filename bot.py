import os
import json
import logging

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, Router, F
from aiogram.enums import ParseMode
from aiogram.types import (
    Message, InlineKeyboardMarkup, InlineKeyboardButton,
    CallbackQuery
)
from aiogram.filters import CommandStart
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from google import genai
from google.genai import types

# === –ó–∞–≥—Ä—É–∑–∫–∞ .env ===
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(level=logging.INFO)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini ===
client = genai.Client(api_key=GEMINI_API_KEY)

# === Telegram Bot ===
bot = Bot(token=TELEGRAM_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
router = Router()

# === FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ===
class UserState(StatesGroup):
    program = State()

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º ===
PROGRAMS = {
    "ai": {
        "title": "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
        "file": "data/ai_program.json"
    },
    "product": {
        "title": "AI Product",
        "file": "data/ai_product.json"
    },
    "both": {
        "title": "–ï—â—ë –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è",
        "file": ["data/ai_program.json", "data/ai_product.json"]
    }
}

# === –ë—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã ===
quick_question_map = {
    "cost": "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –æ–±—É—á–µ–Ω–∏–µ?",
    "admission": "–ú–æ–∂–Ω–æ –ª–∏ –ø–æ—Å—Ç—É–ø–∏—Ç—å –±–µ–∑ –ø—Ä–æ—Ñ–∏–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è?",
    "scholarship": "–ö–∞–∫–∏–µ –µ—Å—Ç—å —Å—Ç–∏–ø–µ–Ω–¥–∏–∏?",
    "final": "–ß—Ç–æ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞–∫ –≤—ã–ø—É—Å–∫–Ω—É—é —Ä–∞–±–æ—Ç—É?",
}

def get_quick_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=text, callback_data=f"quick:{qid}")]
        for qid, text in quick_question_map.items()
    ])

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã ===
def get_program_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=cfg["title"], callback_data=f"program:{pid}")]
        for pid, cfg in PROGRAMS.items()
    ])

# === –ó–∞–≥—Ä—É–∑–∫–∞ JSON –æ–¥–Ω–æ–π –∏–ª–∏ –æ–±–µ–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º ===
def load_program_json(program_id: str):
    try:
        files = PROGRAMS[program_id]["file"]
        if isinstance(files, list):
            merged = {}
            for path in files:
                with open(path, "r", encoding="utf-8") as f:
                    data = json.load(f)
                    merged.update(data)
            return merged
        else:
            with open(files, "r", encoding="utf-8") as f:
                return json.load(f)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ JSON: {e}")
        return None

# === /start ===
@router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–µ –ò–¢–ú–û.\n\n–í—ã–±–µ—Ä–∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É:",
        reply_markup=get_program_keyboard()
    )

# === –≤—ã–±–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã ===
@router.callback_query(F.data.startswith("program:"))
async def handle_program_choice(callback: CallbackQuery, state: FSMContext):
    program_id = callback.data.split(":")[1]
    if program_id not in PROGRAMS:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")
        return

    await state.set_state(UserState.program)
    await state.update_data(program_id=program_id)
    await callback.message.answer(
        f"‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–±—Ä–∞–Ω–∞: {PROGRAMS[program_id]['title']}\n\n–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö:",
        reply_markup=get_quick_keyboard()
    )
    await callback.answer()

# === –±—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã ===
@router.callback_query(F.data.startswith("quick:"))
async def handle_quick(callback: CallbackQuery, state: FSMContext):
    qid = callback.data.split(":")[1]
    question = quick_question_map.get(qid)
    if question:
        await callback.message.answer(f"‚ùì {question}")
        await handle_question(callback.message, question, state)
    await callback.answer()

# === —Å–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç ===
@router.message(F.text)
async def handle_free_question(message: Message, state: FSMContext):
    await handle_question(message, message.text.strip(), state)

# === –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ ===
async def handle_question(message: Message, question: str, state: FSMContext):
    user_data = await state.get_data()
    program_id = user_data.get("program_id")

    if not program_id:
        await message.answer("‚õî –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É:", reply_markup=get_program_keyboard())
        return

    data = load_program_json(program_id)
    if not data:
        await message.answer("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ.")
        return

    # === –ü—Ä–æ–º–ø—Ç –¥–ª—è Gemini ===
    prompt = (
        "–¢—ã ‚Äî –±–æ—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–µ –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –ò–¢–ú–û. "
        "–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ JSON:\n\n"
        f"{json.dumps(data, ensure_ascii=False)}"
    )

    await message.answer("ü§ñ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")
    try:
        contents = [
            types.Content(role="user", parts=[types.Part(text=prompt)]),
            types.Content(role="user", parts=[types.Part(text=question)])
        ]
        response = client.models.generate_content(
            model="gemini-1.5-flash",
            contents=contents,
            config=types.GenerateContentConfig(
                candidate_count=1,
                temperature=0.6
            )
        )
        reply = response.candidates[0].content.parts[0].text
        await message.answer(reply)
    except Exception as e:
        logging.exception("Gemini error")
        await message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –º–æ–¥–µ–ª–∏ Gemini.")

# === –∑–∞–ø—É—Å–∫ ===
async def main():
    dp = Dispatcher()
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
